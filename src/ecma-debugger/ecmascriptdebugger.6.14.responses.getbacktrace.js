// Autogenerated by hob
window.cls || (window.cls = {});
cls.EcmascriptDebugger || (cls.EcmascriptDebugger = {});
cls.EcmascriptDebugger["6.14"] || (cls.EcmascriptDebugger["6.14"] = {});

/**
  * Frames are in innermost-first order.
  */
cls.EcmascriptDebugger["6.14"].BacktraceFrameList = function(arr)
{
  this.frameList = (arr[0] || []).map(function(item)
  {
    return new cls.EcmascriptDebugger["6.14"].BacktraceFrame(item);
  });
  /**
    * The list of return values that were returned from the most recent
    * function calls. List is cleared upon calling a function.
    * Most recently returned value is first in the list.
    *
    * @since 6.10
    */
  this.returnValueList = (arr[1] || []).map(function(item)
  {
    return new cls.EcmascriptDebugger["6.14"].ReturnValue(item);
  });
};

cls.EcmascriptDebugger["6.14"].BacktraceFrame = function(arr)
{
  this.functionID = arr[0];
  this.argumentObject = arr[1];
  this.variableObject = arr[2];
  this.thisObject = arr[3];
  /**
    * TODO: Spec says repeated, while the code only assumes one (required)
    */
  this.objectValue = arr[4] ? new cls.EcmascriptDebugger["6.14"].ObjectValue(arr[4], this) : null;
  this.scriptID = arr[5];
  this.lineNumber = arr[6];
  /**
    * The variable objects in the scope chain of the function. The first
    * element in the list is the innermost scope (the scope of the function
    * itself). The list includes the global scope.
    *
    * @since 6.1
    */
  this.scopeList = arr[7] || [];
  /**
    * The full value of the 'arguments' object.
    *
    * @since 6.2
    */
  this.argumentValue = arr[8] ? new cls.EcmascriptDebugger["6.14"].ObjectValue(arr[8], this) : null;
  /**
    * The full value of the 'this' object.
    *
    * @since 6.2
    */
  this.thisValue = arr[9] ? new cls.EcmascriptDebugger["6.14"].ObjectValue(arr[9], this) : null;
};

cls.EcmascriptDebugger["6.14"].ObjectValue = function(arr)
{
  this.objectID = arr[0];
  this.isCallable = arr[1];
  /**
    * type, function or object
    */
  this.type = arr[2];
  this.prototypeID = arr[3];
  /**
    * The class of the object.
    */
  this.className = arr[4];
  /**
    * If the object is a function, this is the name of
    * the variable associated with that function (if any).
    */
  this.functionName = arr[5];
};

/**
  * The object representing return value of a function. Includes context
  * information indicating where from and where to the value was returned (script
  * id, line number), returned value and function object itself that returned
  * the value.
  *
  * @since 6.10
  */
cls.EcmascriptDebugger["6.14"].ReturnValue = function(arr)
{
  /**
    * The value that was returned.
    */
  this.value = arr[0] ? new cls.EcmascriptDebugger["6.14"].Value(arr[0], this) : null;
  /**
    * The function object from which the value was returned.
    */
  this.functionFrom = arr[1] ? new cls.EcmascriptDebugger["6.14"].ObjectValue(arr[1], this) : null;
  /**
    * The position where the value was returned from.
    */
  this.positionFrom = arr[2] ? new cls.EcmascriptDebugger["6.14"].Position(arr[2], this) : null;
  /**
    * The position where the value was returned to.
    */
  this.positionTo = arr[3] ? new cls.EcmascriptDebugger["6.14"].Position(arr[3], this) : null;
};

/**
  * Represents an ECMAScript value, a value is either one of the primitives
  * like string or boolean or an object.
  */
cls.EcmascriptDebugger["6.14"].Value = function(arr)
{
  /**
    * The type of value.
    *
    * @note Booleans are encoded as either TRUE or FALSE to shorten the number
    * fields in use.
    */
  // cls.EcmascriptDebugger["6.14"].Value.Type
  this.type = arr[0];
  /**
    * The numeric value, set if type = NUMBER.
    */
  this.number = arr[1];
  /**
    * The string, set if type = STRING.
    */
  this.str = arr[2];
  /**
    * Object information, set if type = OBJECT.
    */
  this.object = arr[3] ? new cls.EcmascriptDebugger["6.14"].ObjectValue(arr[3], this) : null;
};
cls.EcmascriptDebugger["6.14"].Value.Type =
{
  /**
    * The undefined type, returned when no value was found or "undefined"
    * was referenced.
    */
  0: "UNDEFINED",
  /**
    * A null value.
    */
  1: "NULL",
  /**
    * Boolean value true.
    */
  2: "TRUE",
  /**
    * Boolean value false.
    */
  3: "FALSE",
  /**
    * NaN value which cannot be exported to JSON directly.
    * Should be treated like a number.
    *
    * ECMAScript users should use this code to get the value natively::
    *
    *   parseFloat("NaN")
    */
  4: "NAN",
  /**
    * Plus infinity value which cannot be export to JSON directly.
    * Should be treated like a number.
    *
    * ECMAScript users should use this code to get the value natively::
    *
    *   parseFloat("Infinity")
    */
  5: "PLUS_INFINITY",
  /**
    * Minus infinity value which cannot be export to JSON directly.
    * Should be treated like a number.
    *
    * ECMAScript users should use this code to get the value natively::
    *
    *   parseFloat("-Infinity")
    */
  6: "MINUS_INFINITY",
  /**
    * A number, use the field 'number' for the actual value.
    */
  7: "NUMBER",
  /**
    * A string, use the field 'str' for the actual string data.
    */
  8: "STRING",
  /**
    * An object, the field 'object' contains object details.
    */
  9: "OBJECT",
};

/**
  * Defines the position in a script. The position is identified by the ID of
  * the script and the line number in the script.
  */
cls.EcmascriptDebugger["6.14"].Position = function(arr)
{
  /**
    * ID of the script which contains the position.
    * The ID will be set in the ScriptInfo message when a new script appears.
    */
  this.scriptID = arr[0];
  /**
    * The line number in the script.
    */
  this.lineNumber = arr[1];
};

