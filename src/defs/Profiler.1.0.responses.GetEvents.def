message <span class="message">Events</span>
{
  <span class="comment">/**
    * Represents the smallest `Interval` which is large enough to cover all the
    * `Intervals` of each individual `Event` in the list.
    * 
    * Is not set if `eventList` is empty.
    */</span>
  optional Interval interval = 1;
  {
    <span class="comment">/**
      * The start of the `Interval`. If not present, this is an left-open
      * `Interval` ([-inf, N]).
      */</span>
    optional <span class="number">double</span> start = 1;
    <span class="comment">/**
      * The end of the `Interval`. If not present, this is an right-open
      * `Interval` ([N, +inf]).
      */</span>
    optional <span class="number">double</span> end = 2;
  }
  <span class="comment">/**
    * List of `Events`. The `Events` are ordered according to the start time of
    * their `Intervals` (increasing order).
    */</span>
  repeated Event eventList = 2;
  {
    <span class="comment">/**
      * The type of `Event`. Some `Events` carry additional information relevant
      * to their type.
      */</span>
    required EventType type = 1;
    {
      <span class="comment">/**
        * Unknown type.
        */</span>
      <span class="enum">GENERIC</span> = 1;
      <span class="comment">/**
        * Special `Event` type, which represents the total time spent in the
        * process. This `Event` *may* appear in a response to `GetEvents` command
        * in `REDUCE_ALL` mode. Not all builds support this `Event`, and it will
        * only be present if supported.
        */</span>
      <span class="enum">PROCESS</span> = 2;
      <span class="comment">/**
        * Occurs when the main document (such as HTML, XHTML, etc) is parsed.
        */</span>
      <span class="enum">DOCUMENT_PARSING</span> = 3;
      <span class="comment">/**
        * Occurs when stylesheets are parsed. This `Event` carries information
        * about the URL of the stylesheet. If the stylesheet was inline, the parent
        * document is used for the URL.
        */</span>
      <span class="enum">CSS_PARSING</span> = 4;
      <span class="comment">/**
        * Occurs when a script is compiled. This `Event` carries the URL of the
        * script. If the script is inline, the parent document is used for the URL.
        */</span>
      <span class="enum">SCRIPT_COMPILATION</span> = 5;
      <span class="comment">/**
        * Occurs when a script thread is being evaluated (run). `Events` of this
        * type carry information about the type of the thread (inline, eval, and so
        * forth). If the thread is an event handler, the name of the event is also
        * provided.
        */</span>
      <span class="enum">SCRIPT_THREAD_EVALUATION</span> = 6;
      <span class="comment">/**
        * Occurs when a reflow is triggered. A reflow is triggered when something
        * is changed on the document, which *may* require a recalculation of
        * style and layout.
        * 
        * A `REFLOW` `Event` does not mean that the whole page will be
        * recalculated; it is more like a *request* to check whether something
        * needs to updated. The `REFLOW` is typically a parent of a
        * `STYLE_RECALCULATION`, and then `LAYOUT`, like this:
        * 
        * - `REFLOW`
        *   - `STYLE_RECALCULATION`
        *     - `CSS_SELECTOR_MATCHING` (#foo)
        *     - `CSS_SELECTOR_MATCHING` (.bar)
        *     - ...
        *     - `CSS_SELECTOR_MATCHING` (#bar .fooz)
        *   - `LAYOUT`
        * 
        * Most the time will be spent in `STYLE_RECALCULATION` and `LAYOUT`. The
        * `REFLOW` itself is not expensive.
        * 
        * A `REFLOW` may also have no children at all, if no changes were to
        * layout were necessary.
        */</span>
      <span class="enum">REFLOW</span> = 7;
      <span class="comment">/**
        * Occurs when a CSS needs to be recalculated for a set of elements in the
        * document. This `Event` usually contains many `CSS_SELECTOR_MATCHING`
        * `Events`.
        * 
        * See `REFLOW` for more information about how this `Event` relates to
        * `REFLOW`, `CSS_SELECTOR_MATCHING` and `LAYOUT`.
        */</span>
      <span class="enum">STYLE_RECALCULATION</span> = 8;
      <span class="comment">/**
        * Occurs when we try to match a specific selector. `Events` of this type
        * carry information about which selector we tried to match.
        * 
        * See `REFLOW` for more information about how this `Event` relates to
        * `REFLOW`, `STYLE_RECALCULATION` and `LAYOUT`.
        */</span>
      <span class="enum">CSS_SELECTOR_MATCHING</span> = 9;
      <span class="comment">/**
        * Occurs when the layout tree is created or changed. Changes to the layout
        * tree are done based on the caclulated style of elements, so `LAYOUT` will
        * usually occur after a `STYLE_RECALCULATION`.
        * 
        * See `REFLOW` for more information about how these `Events` usually relate
        * to each other.
        */</span>
      <span class="enum">LAYOUT</span> = 10;
      <span class="comment">/**
        * Occurs when we draw the document (or parts of the document).
        */</span>
      <span class="enum">PAINT</span> = 11;
    }
    <span class="comment">/**
      * The time spent on this task. (Self-time). This time takes place at some
      * (unknown) point in the `Interval`.
      * 
      * Does not include `overhead`.
      */</span>
    required <span class="number">double</span> time = 2;
    <span class="comment">/**
      * Profiling overhead. This is the time spent doing things which would
      * normally not happen if we had not been profiling, e.g. storing the
      * selector text for CSS selector `Events`.
      * 
      * The overhead takes place at some (unknown) point in the `Interval`.
      */</span>
    required <span class="number">double</span> overhead = 3;
    <span class="comment">/**
      * Number of hits on this `Event`.
      */</span>
    required <span class="number">uint32</span> hits = 4;
    <span class="comment">/**
      * The `Interval` in which the `Event` took place. An `Event` may consume time
      * across multiple time slices (e.g. thread evaluation) without requiring
      * *all* the time in that `Interval`.
      * 
      * The `time` field contains the time actually spent working on the `Event`.
      * There is no exact start and end time for `Events` which are spread across
      * time slices, because the self-time spent is fragmented across the
      * `Interval`.
      * 
      * We can therefore only know that the `time` spent on this `Event` happened
      * some time in this `Interval`, but not exactly where. (It would be
      * possible to expose each fragment of execution, of course, but the amount
      * of data required to represent this would be to large to handle).
      * 
      * The start of the `Interval` represents the first time we started working
      * on this `Event`. The end of the `Interval` represents the last time we
      * were done working on this `Event`.
      */</span>
    optional Interval interval = 5;
    {
      <span class="comment">/**
        * The start of the `Interval`. If not present, this is an left-open
        * `Interval` ([-inf, N]).
        */</span>
      optional <span class="number">double</span> start = 1;
      <span class="comment">/**
        * The end of the `Interval`. If not present, this is an right-open
        * `Interval` ([N, +inf]).
        */</span>
      optional <span class="number">double</span> end = 2;
    }
    <span class="comment">/**
      * The non-zero ID of this `Event`.
      */</span>
    optional <span class="number">uint32</span> eventID = 6;
    <span class="comment">/**
      * The parent `Event` ID, or not set if this is a top-level `Event`.
      */</span>
    optional <span class="number">uint32</span> parentEventID = 7;
    <span class="comment">/**
      * The number of immediate children (not grandchildren) for this `Event`.
      */</span>
    optional <span class="number">uint32</span> childCount = 8;
    <span class="comment">/**
      * Aggregated `time` for all children, including `time` for this `Event`.
      */</span>
    optional <span class="number">double</span> aggregatedTime = 9;
    <span class="comment">/**
      * Aggregated `overhead` for all children, including `overhead` for this
      * `Event`.
      */</span>
    optional <span class="number">double</span> aggregatedOverhead = 10;
    <span class="comment">/**
      * Additional information for `CSS_SELECTOR_MATCHING` `Events`.
      */</span>
    optional CssSelectorMatchingEvent cssSelectorMatching = 11;
    {
      <span class="comment">/**
        * The selector text, e.g. "#foo .bar".
        */</span>
      required <span class="string">string</span> selector = 1;
    }
    <span class="comment">/**
      * Additional information for `SCRIPT_THREAD_EVALUATION` `Events`.
      */</span>
    optional ScriptThreadEvaluationEvent scriptThreadEvaluation = 12;
    {
      <span class="comment">/**
        * What kind of thread the `Event` represents.
        */</span>
      required ScriptThreadType scriptThreadType = 1;
      {
        <span class="enum">UNKNOWN</span> = 0;
        <span class="comment">/**
          * A common thread, such as the main thread.
          */</span>
        <span class="enum">COMMON</span> = 1;
        <span class="comment">/**
          * A timeout or interval thread, i.e. 'window.setTimeout'/'setInterval'.
          */</span>
        <span class="enum">TIMEOUT</span> = 2;
        <span class="comment">/**
          * An event handler thread. `ScriptThreadEvaluationEvents` of this type also
          * contain the name of the event that fired.
          */</span>
        <span class="enum">EVENT</span> = 3;
        <span class="comment">/**
          * A thread which executes inline scripts during loading.
          */</span>
        <span class="enum">INLINE_SCRIPT</span> = 4;
        <span class="comment">/**
          * A thread which executes a script using the javascript:-URI scheme.
          */</span>
        <span class="enum">JAVASCRIPT_URL</span> = 5;
        <span class="comment">/**
          * A thread executed when navigating in history (e.g. hash change).
          */</span>
        <span class="enum">HISTORY_NAVIGATION</span> = 6;
        <span class="comment">/**
          * An eval triggered from Java (LiveConnect).
          */</span>
        <span class="enum">JAVA_EVAL</span> = 7;
        <span class="comment">/**
          * An eval triggered by the debugger.
          */</span>
        <span class="enum">DEBUGGER_EVAL</span> = 8;
      }
      <span class="comment">/**
        * If `scriptThreadType` is `EVENT`, this field will contain the event name,
        * e.g. 'load'.
        * 
        * In all other cases, this field is not set.
        */</span>
      optional <span class="string">string</span> eventName = 2;
    }
    <span class="comment">/**
      * Additional information for `DOCUMENT_PARSING` `Events`.
      */</span>
    optional DocumentParsingEvent documentParsing = 13;
    {
      <span class="comment">/**
        * The URL of the document that was parsed.
        */</span>
      required <span class="string">string</span> url = 1;
    }
    <span class="comment">/**
      * Additional information for `CSS_PARSING` `Events`.
      */</span>
    optional CssParsingEvent cssParsing = 14;
    {
      <span class="comment">/**
        * The URL of the stylesheet that was parsed. If the stylesheet is inlined
        * in another document, that document is used as the URL.
        */</span>
      required <span class="string">string</span> url = 1;
    }
    <span class="comment">/**
      * Additional information for `SCRIPT_COMPILATION` `Events`.
      */</span>
    optional ScriptCompilationEvent scriptCompilation = 15;
    {
      <span class="comment">/**
        * Describes the origin of the script.
        */</span>
      required ScriptType scriptType = 1;
      {
        <span class="comment">/**
          * The script is of unknown type.
          */</span>
        <span class="enum">UNKNOWN</span> = 0;
        <span class="comment">/**
          * The script is in an external file, and the document links to it.
          */</span>
        <span class="enum">LINKED</span> = 1;
        <span class="comment">/**
          * The script is inlined in the document, not via document.write().
          */</span>
        <span class="enum">INLINE</span> = 2;
        <span class="comment">/**
          * The script is inlined in the documented via document.write().
          */</span>
        <span class="enum">GENERATED</span> = 3;
        <span class="comment">/**
          * The script comes from a call to `eval`.
          */</span>
        <span class="enum">EVAL</span> = 4;
        <span class="comment">/**
          * The script comes from a call to `setTimeout` or `setInterval`.
          */</span>
        <span class="enum">TIMEOUT</span> = 5;
        <span class="comment">/**
          * The script comes from usage of the `javascript:` URI handler.
          */</span>
        <span class="enum">URI</span> = 6;
        <span class="comment">/**
          * The script is attached as an event handler attribute in the markup.
          */</span>
        <span class="enum">EVENT_HANDLER</span> = 7;
        <span class="comment">/**
          * The script is injected into the page by the User Javascript feature.
          */</span>
        <span class="enum">USERJS</span> = 8;
        <span class="comment">/**
          * The script is injected into the page by the Browser Javascript feature.
          */</span>
        <span class="enum">BROWSERJS</span> = 9;
        <span class="comment">/**
          * The script is injected into the page by an extension.
          */</span>
        <span class="enum">EXTENSIONJS</span> = 10;
        <span class="comment">/**
          * Scripts compiled by `EcmascriptDebugger`.
          */</span>
        <span class="enum">DEBUGGER</span> = 11;
      }
      <span class="comment">/**
        * The URL of the stylesheet that was parsed. If the stylesheet is inlined
        * in another document, that document is used as the URL.
        */</span>
      optional <span class="string">string</span> url = 2;
    }
    <span class="comment">/**
      * Additional information for `PAINT` `Events`.
      */</span>
    optional PaintEvent paint = 16;
    {
      <span class="comment">/**
        * The `Area` that was painted, in document coordinates relative the upper
        * left corner of the view.
        */</span>
      optional Area area = 1;
      {
        required <span class="number">int32</span> x = 1;
        required <span class="number">int32</span> y = 2;
        required <span class="number">int32</span> w = 3;
        required <span class="number">int32</span> h = 4;
      }
    }
  }
}
