message <span class="message">WidgetList</span>
{
  repeated Widget widgetList = 1;
  {
    <span class="comment">/**
      * A unique identifier for the widget.
      * 
      * e.g. "wuid-351f0e9d-24f2-080b-07e7-13b724cdaef8"
      */</span>
    required <span class="string">string</span> widgetID = 1;
    <span class="comment">/**
      * The major type for the widget, most fields are common among
      * the types but certain fields are type specific.
      */</span>
    required Type type = 2;
    {
      <span class="comment">/**
        * Regular widget.
        */</span>
      <span class="enum">WIDGET</span> = 1;
      <span class="comment">/**
        * Unite application or service.
        */</span>
      <span class="enum">UNITE</span> = 2;
      <span class="comment">/**
        * Browser extension.
        */</span>
      <span class="enum">EXTENSION</span> = 3;
    }
    required WidgetType widgetType = 3;
    {
      <span class="enum">UNKNOWN</span> = 1;
      <span class="enum">CHROMELESS</span> = 2;
      <span class="enum">WINDOWED</span> = 3;
      <span class="enum">TOOLBAR</span> = 4;
    }
    <span class="comment">/**
      * Represents the full human-readable name for a widget. This field will
      * only be set if there is a name element defined in the widget
      * specification.
      * 
      * Note: This is either the localized name that matches the gadget locales, or the unlocalized name.
      */</span>
    optional Name name = 4;
    {
      <span class="comment">/**
        * The full human-readable name for the widget.
        */</span>
      required <span class="string">string</span> text = 1;
      <span class="comment">/**
        * A displayable string intended to represent a condensed name for a widget,
        * e.g. as a name for an icon.
        * 
        * note: This is the unlocalized version.
        */</span>
      optional <span class="string">string</span> shortName = 2;
      <span class="comment">/**
        * The locale used for the name and shortName fields.
        * If the fields are unlocalized the field is not set.
        */</span>
      optional <span class="string">string</span> locale = 3;
    }
    required Properties properties = 5;
    {
      <span class="comment">/**
        * Specifies whether the widget is currently running or not.
        */</span>
      required <span class="boolean">bool</span> isActive = 1;
      <span class="comment">/**
        * Specifies whether the widget is enabled or not. If the widget is
        * disabled details on this may be found in disabledDetails.
        */</span>
      required <span class="boolean">bool</span> isEnabled = 2;
      <span class="comment">/**
        * Specifies whether the widget is dockable or not. This is only used
        * by older Opera widgets (not W3C), other types sets this to false.
        */</span>
      required <span class="boolean">bool</span> isDockable = 3;
      <span class="comment">/**
        * Specifies whether the widget as access to the filesystem or not.
        */</span>
      required <span class="boolean">bool</span> hasFileAccess = 4;
      <span class="comment">/**
        * Specifies whether the widget is considered persistent or not.
        * Persistent widgets cannot be removed. Widgets are by default not
        * persistent.
        */</span>
      required <span class="boolean">bool</span> isPersistent = 5;
      <span class="comment">/**
        * True if the widget has transparent features or not, false otherwise.
        */</span>
      required <span class="boolean">bool</span> hasTransparentFeatures = 6;
      <span class="comment">/**
        * Specifies whether the widget can use JS plugins or not. This is
        * specific to older Opera widget (not W3C), other types sets this to
        * false.
        */</span>
      required <span class="boolean">bool</span> hasJSPluginsAccess = 8;
      <span class="comment">/**
        * Specific flag for JIL widgets, set to true if the widget has
        * filesystem access.
        */</span>
      required <span class="boolean">bool</span> hasJILFilesystemAccess = 9;
      <span class="comment">/**
        * Is true if the widget namespace supports feature tags.
        * Currently W3C and JIL widgets support this.
        */</span>
      required <span class="boolean">bool</span> hasFeatureTagSupport = 10;
      <span class="comment">/**
        * The entire path of the widget as it is stored on the host.
        */</span>
      required <span class="string">string</span> path = 11;
      <span class="comment">/**
        * The filename of the widget as it stored on the host.
        */</span>
      required <span class="string">string</span> fileName = 12;
      <span class="comment">/**
        * The relative path to the config file, this is usually config.xml
        * but may differ depending on the widget namespace in use.
        * e.g. "config.xml"
        */</span>
      required <span class="string">string</span> configFilePath = 13;
      <span class="comment">/**
        * The URL which was used to download and install the widget. This
        * may be empty in some cases even though it was downloaded from a URL.
        */</span>
      required <span class="string">string</span> downloadURL = 14;
      <span class="comment">/**
        * The ID of the window the widget was opened in or 0 if there is no window.
        */</span>
      required <span class="number">uint32</span> windowID = 15 [default = 0];
      <span class="comment">/**
        * Set to true if the widget has access to public networks.
        * Some widget namespaces allow this to be controlled per widget
        * while others have it set globally.
        */</span>
      required <span class="boolean">bool</span> publicNetwork = 16;
      <span class="comment">/**
        * Set to true if the widget has access to private networks.
        * Some widget namespaces allow this to be controlled per widget
        * while others have it set globally.
        */</span>
      required <span class="boolean">bool</span> privateNetwork = 17;
      <span class="comment">/**
        * Details on why a widget is disabled. Only set when disabled.
        */</span>
      optional <span class="string">string</span> disabledDetails = 18;
    }
    <span class="comment">/**
      * Represents people or an organization attributed with the creation of the widget.
      * This field will only be set if there is an author element defined in the
      * widget specification.
      */</span>
    optional Author author = 6;
    {
      <span class="comment">/**
        * People or organization attributed with the creation of the widget.
        */</span>
      required <span class="string">string</span> text = 1;
      <span class="comment">/**
        * Email address associated with the author.
        */</span>
      optional <span class="string">string</span> email = 2;
      <span class="comment">/**
        * URI that represents a link associated with the author.
        */</span>
      optional <span class="string">string</span> href = 3;
      <span class="comment">/**
        * Represents the name of an organization that the author is affiliated with.
        */</span>
      optional <span class="string">string</span> organization = 4;
    }
    <span class="comment">/**
      * The namespaces this widget uses. If no namespace is defined the field is not set.
      * e.g. "http://www.w3.org/ns/widgets" or "http://xmlns.opera.com/2006/widget"
      */</span>
    optional <span class="string">string</span> namespace = 7;
    <span class="comment">/**
      * The version of the widget.
      */</span>
    optional <span class="string">string</span> version = 8;
    <span class="comment">/**
      * If specified defines the preferred viewport width in pixels. The value,
      * when set, is from 1 and up.
      */</span>
    optional <span class="number">int32</span> width = 9;
    <span class="comment">/**
      * If specified defines the preferred viewport height in pixels. The value,
      * when set, is from 1 and up.
      */</span>
    optional <span class="number">int32</span> height = 10;
    <span class="comment">/**
      * The current width of the widget in pixels.
      */</span>
    optional <span class="number">int32</span> currentWidth = 11;
    <span class="comment">/**
      * The current height of the widget in pixels.
      */</span>
    optional <span class="number">int32</span> currentHeight = 12;
    <span class="comment">/**
      * The current viewmode used by the widget.
      */</span>
    required ViewMode currentViewMode = 13;
    {
      <span class="enum">UNKNOWN</span> = 1;
      <span class="comment">/**
        * No chrome
        */</span>
      <span class="enum">WIDGET</span> = 2;
      <span class="comment">/**
        * Floating, same as widget (W3C mode)
        */</span>
      <span class="enum">FLOATING</span> = 3;
      <span class="enum">DOCKED</span> = 4;
      <span class="enum">APPLICATION</span> = 5;
      <span class="enum">FULLSCREEN</span> = 6;
      <span class="comment">/**
        * With chrome and occupying the entire screen.
        */</span>
      <span class="enum">MAXIMIZED</span> = 7;
      <span class="comment">/**
        * Same as docked
        */</span>
      <span class="enum">MINIMIZED</span> = 8;
      <span class="comment">/**
        * Same as widget
        */</span>
      <span class="enum">WINDOWED</span> = 9;
    }
    <span class="comment">/**
      * The default viewmode for the widget.
      */</span>
    required ViewMode defaultViewMode = 14;
    {
      <span class="enum">UNKNOWN</span> = 1;
      <span class="comment">/**
        * No chrome
        */</span>
      <span class="enum">WIDGET</span> = 2;
      <span class="comment">/**
        * Floating, same as widget (W3C mode)
        */</span>
      <span class="enum">FLOATING</span> = 3;
      <span class="enum">DOCKED</span> = 4;
      <span class="enum">APPLICATION</span> = 5;
      <span class="enum">FULLSCREEN</span> = 6;
      <span class="comment">/**
        * With chrome and occupying the entire screen.
        */</span>
      <span class="enum">MAXIMIZED</span> = 7;
      <span class="comment">/**
        * Same as docked
        */</span>
      <span class="enum">MINIMIZED</span> = 8;
      <span class="comment">/**
        * Same as widget
        */</span>
      <span class="enum">WINDOWED</span> = 9;
    }
    <span class="comment">/**
      * All viewmodes defined for this widget.
      */</span>
    repeated ViewMode viewModeList = 15;
    {
      <span class="enum">UNKNOWN</span> = 1;
      <span class="comment">/**
        * No chrome
        */</span>
      <span class="enum">WIDGET</span> = 2;
      <span class="comment">/**
        * Floating, same as widget (W3C mode)
        */</span>
      <span class="enum">FLOATING</span> = 3;
      <span class="enum">DOCKED</span> = 4;
      <span class="enum">APPLICATION</span> = 5;
      <span class="enum">FULLSCREEN</span> = 6;
      <span class="comment">/**
        * With chrome and occupying the entire screen.
        */</span>
      <span class="enum">MAXIMIZED</span> = 7;
      <span class="comment">/**
        * Same as docked
        */</span>
      <span class="enum">MINIMIZED</span> = 8;
      <span class="comment">/**
        * Same as widget
        */</span>
      <span class="enum">WINDOWED</span> = 9;
    }
    <span class="comment">/**
      * Represents a human-readable description of the widget.
      * This field will only be set if there is a description element defined
      * in the widget specification.
      * 
      * Note: This is either the localized description that matches the gadget locales, or the unlocalized description.
      */</span>
    optional Description description = 16;
    {
      <span class="comment">/**
        * The description text.
        */</span>
      required <span class="string">string</span> text = 1;
      <span class="comment">/**
        * The locale used for the description field.
        * If the field is unlocalized the field is not set.
        */</span>
      optional <span class="string">string</span> locale = 2;
    }
    <span class="comment">/**
      * The license information for the widget if one is present.
      * This field will only be set if there is a license element defined in
      * the widget specification.
      */</span>
    optional License license = 17;
    {
      <span class="comment">/**
        * The license text.
        */</span>
      required <span class="string">string</span> text = 1;
      <span class="comment">/**
        * A URL or path that points to a representation of a software and/or content license
        */</span>
      optional <span class="string">string</span> href = 2;
      <span class="comment">/**
        * The locale used for this license.
        * If the field is unlocalized the field is not set.
        */</span>
      optional <span class="string">string</span> locale = 3;
    }
    <span class="comment">/**
      * All icons defined for the widget.
      */</span>
    repeated Icon iconList = 18;
    {
      <span class="comment">/**
        * A path attribute that points to a file inside the widget package.
        */</span>
      required <span class="string">string</span> src = 1;
      <span class="comment">/**
        * The author's preferred width for the icon if any. Only set for values
        * 1 and up.
        */</span>
      optional <span class="number">uint32</span> width = 2;
      <span class="comment">/**
        * The author's preferred height for the icon if any. Only set for values
        * 1 and up.
        */</span>
      optional <span class="number">uint32</span> height = 3;
    }
    <span class="comment">/**
      * Declare a custom start file the user agent is expected to use when it
      * instantiates the widget.
      * This field will only be set if there is a content element defined in
      * the widget specification.
      */</span>
    optional Content content = 19;
    {
      <span class="comment">/**
        * A path which points to a file within the widget package.
        * e.g. "mywidget.html"
        */</span>
      required <span class="string">string</span> src = 1;
      <span class="comment">/**
        * Defines the MIME-Type for the file referenced in 'src'.
        * The default MIME-Type is "text/html".
        */</span>
      optional <span class="string">string</span> type = 2;
      <span class="comment">/**
        * Defines the encoding for the file referenced in 'src'.
        * The default encoding is "UTF-8".
        */</span>
      optional <span class="string">string</span> encoding = 3;
    }
    <span class="comment">/**
      * List of all features requested by the widget.
      */</span>
    repeated Feature featureList = 20;
    {
      <span class="comment">/**
        * An IRI attribute that identifies a feature that is needed by the widget at runtime (such as an API).
        */</span>
      required <span class="string">string</span> name = 1;
      <span class="comment">/**
        * A boolean attribute that indicates whether or not this feature has to be available to the widget at runtime.
        */</span>
      required <span class="boolean">bool</span> isRequired = 2;
      <span class="comment">/**
        * List of parameters for the feature.
        */</span>
      repeated Param paramList = 3;
      {
        required <span class="string">string</span> name = 1;
        required <span class="string">string</span> value = 2;
      }
    }
    <span class="comment">/**
      * List of all preferences defined by the widget.
      */</span>
    repeated Preference preferenceList = 21;
    {
      <span class="comment">/**
        * The name of the preference
        * e.g. "skin"
        */</span>
      required <span class="string">string</span> name = 1;
      <span class="comment">/**
        * The value of the preference
        * e.g. "alien"
        */</span>
      required <span class="string">string</span> value = 2;
      <span class="comment">/**
        * Controls whether this preference can, or cannot, be overwritten at runtime (e.g. via scripts).
        */</span>
      required <span class="boolean">bool</span> isReadOnly = 3 [default = false];
    }
    <span class="comment">/**
      * If the widget was signed with a digital signature this is set with
      * information on the signature.
      */</span>
    optional Signature signature = 22;
    {
      <span class="comment">/**
        * Short name of the signature used.
        */</span>
      required <span class="string">string</span> id = 1;
      <span class="comment">/**
        * The state of the signature, for instance whether verification failed
        * or it was properly signed.
        */</span>
      required State state = 2;
      {
        <span class="enum">UNKNOWN</span> = 1;
        <span class="comment">/**
          * Widget is unsigned.
          */</span>
        <span class="enum">UNSIGNED</span> = 2;
        <span class="comment">/**
          * Widget is signed and signature is valid.
          */</span>
        <span class="enum">SIGNED</span> = 3;
        <span class="comment">/**
          * Widget is signed but the signature is invalid.
          */</span>
        <span class="enum">VERIFICATION_FAILED</span> = 4;
        <span class="comment">/**
          * Signature verification is still in progress.
          */</span>
        <span class="enum">PENDING</span> = 5;
      }
      <span class="comment">/**
        * Set to true if the widget has been signed with a privileged certificate.
        */</span>
      optional <span class="boolean">bool</span> isPrivilegedCert = 3;
    }
    <span class="comment">/**
      * The URL used for updating the widget.
      */</span>
    optional <span class="string">string</span> updateURL = 23;
    <span class="comment">/**
      * List of requests to access network resources.
      */</span>
    repeated Network networkAccessList = 24;
    {
      <span class="comment">/**
        * Defines the URL that the widget should get access to, e.g. "https://example.net"
        * A special value of U+002A ASTERISK (*) means unrestricted access to any network resources.
        */</span>
      required <span class="string">string</span> origin = 1;
      <span class="comment">/**
        * Indicates whether or not the host component part of origin applies to subdomains as well.
        * The default is not to allow subdomains.
        */</span>
      required <span class="boolean">bool</span> allowSubdomains = 2;
    }
    <span class="comment">/**
      * Lists of security access the widget requests.
      * Note: This only applies to Opera Widgets (namespace "http://xmlns.opera.com/2006/widget" and ""), not W3C and other widget formats.
      */</span>
    repeated SecurityAccess securityAccessList = 25;
    {
      <span class="comment">/**
        * The protocols the widget will be using to contact external servers. All protocols, except the file protocol is permitted.
        * e.g. "http", "https"
        * If the list is empty it means any protocol (excluding exceptions).
        */</span>
      repeated <span class="string">string</span> protocolList = 1;
      <span class="comment">/**
        * The hostnames/ip-addresses which the widget may use, e.g. "www.example.com" or "192.168.1.1"
        * The hostnames is an exact match, so a widget specifying www.example.com will not be able to contact example.com.
        * If the list is empty it means any host.
        */</span>
      repeated <span class="string">string</span> hostList = 2;
      <span class="comment">/**
        * Ports which may be used by the widget.
        * Each entry is a range of ports, e.g. 1024-2048
        * If the list is empty it means port.
        */</span>
      repeated Port portList = 3;
      {
        required <span class="number">uint32</span> low = 1;
        required <span class="number">uint32</span> high = 2;
      }
      <span class="comment">/**
        * The path elements the widget may contact, e.g. "/foo"
        * If the list is empty it means any path.
        */</span>
      repeated <span class="string">string</span> pathList = 4;
    }
    <span class="comment">/**
      * An IRI identifier chosen by widget itself.
      */</span>
    optional <span class="string">string</span> iriIdentifier = 26;
    <span class="comment">/**
      * Additional information which is specific to extensions. Only set when
      * it contains an extension.
      */</span>
    optional ExtensionInfo extensionInfo = 27;
    {
      <span class="comment">/**
        * Specifies the includes folder for the extension.
        */</span>
      required <span class="string">string</span> includesPath = 1;
      <span class="comment">/**
        * True if the extension is currently running.
        */</span>
      required <span class="boolean">bool</span> isRunning = 2;
    }
    <span class="comment">/**
      * Additional information which is specific to Unite apps and services.
      * Only set when it contains a Unite app or service.
      */</span>
    optional UniteInfo uniteInfo = 28;
    {
      required Type type = 1;
      {
        <span class="comment">/**
          * The Unite type is not known by the service.
          */</span>
        <span class="enum">UNKNOWN</span> = 1;
        <span class="enum">SERVICE</span> = 2;
        <span class="enum">APPLICATION</span> = 3;
      }
      <span class="comment">/**
        * The service path, e.g. "fridge".
        */</span>
      optional <span class="string">string</span> servicePath = 2;
    }
  }
}
