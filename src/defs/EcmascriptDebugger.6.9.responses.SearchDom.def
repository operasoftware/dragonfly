message <span class="message">NodeList</span>
{
  repeated NodeInfo nodeList = 1;
  {
    required <span class="number">uint32</span> objectID = 1;
    <span class="comment">/**
      * The type for this Node.
      */</span>
    required NodeType type = 2;
    {
      <span class="comment">/**
        * Unknown elements can appear in the the tree if a node type is used
        * internally which is not known to Scope.
        * 
        * This should normally not happen, and any occurence of an `UNKNOWN` node
        * type may be filed as a bug.
        */</span>
      <span class="enum">UNKNOWN</span> = 0;
      <span class="comment">/**
        * An element in an HTML or XML document, e.g. &lt;p>.
        */</span>
      <span class="enum">ELEMENT</span> = 1;
      <span class="comment">/**
        * An attribute of an `ELEMENT` node.
        */</span>
      <span class="enum">ATTRIBUTE</span> = 2;
      <span class="comment">/**
        * Textual data inside an `ELEMENT` or `ATTRIBUTE`.
        */</span>
      <span class="enum">TEXT</span> = 3;
      <span class="comment">/**
        * Used to escape blocks of text containing characters that would otherwise
        * be regarded as markup.
        */</span>
      <span class="enum">CDATA_SECTION</span> = 4;
      <span class="comment">/**
        * A reference (usage) of an `ENTITY`.
        */</span>
      <span class="enum">ENTITY_REFERENCE</span> = 5;
      <span class="comment">/**
        * A XML entity, e.g. &lt;!ENTITY greet "Hello there">.
        */</span>
      <span class="enum">ENTITY</span> = 6;
      <span class="comment">/**
        * An instruction for the application using the XML, e.g.:
        * &lt;?xml version="1.0"?>
        */</span>
      <span class="enum">PROCESSING_INSTRUCTION</span> = 7;
      <span class="comment">/**
        * A comment node, e.g. &lt;!-- Foo -->
        */</span>
      <span class="enum">COMMENT</span> = 8;
      <span class="comment">/**
        * The root of the document tree.
        */</span>
      <span class="enum">DOCUMENT</span> = 9;
      <span class="comment">/**
        * A document type node, e.g.: &lt;!doctype html>.
        */</span>
      <span class="enum">DOCUMENT_TYPE</span> = 10;
      <span class="comment">/**
        * A "lightweight" `DOCUMENT` node. Represents a portion of a document tree.
        */</span>
      <span class="enum">DOCUMENT_FRAGMENT</span> = 11;
      <span class="comment">/**
        * An XML notation node declares the format of a non-markup entity to be
        * included in the document, e.g.: &lt;!NOTATION GIF system "image/gif">.
        */</span>
      <span class="enum">NOTATION</span> = 12;
      <span class="comment">/**
        * A namespace, e.g.: &lt;namespace:author>Asimov&lt;/namespace:author>.
        */</span>
      <span class="enum">XPATH_NAMESPACE</span> = 13;
      <span class="comment">/**
        * A node maintaned by the SVG DOM.
        */</span>
      <span class="enum">SVG_ELEMENTINSTANCE</span> = 14;
    }
    required <span class="string">string</span> name = 3;
    required <span class="number">uint32</span> depth = 4;
    <span class="comment">/**
      * Used if type is `ELEMENT`.
      */</span>
    optional <span class="string">string</span> namespacePrefix = 5;
    <span class="comment">/**
      * Used if type is `ELEMENT`.
      */</span>
    repeated Attribute attributeList = 6;
    {
      required <span class="string">string</span> namePrefix = 1;
      required <span class="string">string</span> name = 2;
      required <span class="string">string</span> value = 3;
    }
    <span class="comment">/**
      * Used if type is `ELEMENT`.
      */</span>
    optional <span class="number">uint32</span> childrenLength = 7;
    <span class="comment">/**
      * Used if type is `TEXT`, `CDATA_SECTION`, `PROCESSING_INSTRUCTION` or
      * `COMMENT`.
      */</span>
    optional <span class="string">string</span> value = 8;
    <span class="comment">/**
      * Used if type is `DOCUMENT_TYPE`.
      */</span>
    optional <span class="string">string</span> publicID = 9;
    <span class="comment">/**
      * Used if type is `DOCUMENT_TYPE`.
      */</span>
    optional <span class="string">string</span> systemID = 10;
    <span class="comment">/**
      * The runtime ID of this node. This field will always be set.
      * 
      * @since 6.5
      */</span>
    optional <span class="number">uint32</span> runtimeID = 11;
    <span class="comment">/**
      * If the node type is an `ELEMENT` which contains another document,
      * (frame, iframe, or object), this field will be set with a reference to
      * the document node contained within that element.
      * 
      * The field will not be set if the element does not contain a document.
      * 
      * @since 6.5
      */</span>
    optional ObjectReference contentDocument = 12;
    {
      required <span class="number">uint32</span> runtimeID = 1;
      required <span class="number">uint32</span> objectID = 2;
    }
    <span class="comment">/**
      * Like 'contentDocument', but the other direction; if this node is
      * a `DOCUMENT` node, then this field will be set with a reference to the
      * element that contains the document in the parent runtime.
      * 
      * The field will not be set if the document node represents a top-level
      * document.
      * 
      * @since 6.5
      */</span>
    optional ObjectReference frameElement = 13;
    {
      required <span class="number">uint32</span> runtimeID = 1;
      required <span class="number">uint32</span> objectID = 2;
    }
    <span class="comment">/**
      * Explains why the node was included in the response. This field will
      * always be set.
      * 
      * When this message is a response to DOM inspection, this field will be set
      * to TRAVERSAL. When sent as a response to a search, it will either be set
      * to SEARCH_HIT, or SEARCH_PARENT. 
      * 
      * @since 6.5
      */</span>
    optional MatchReason matchReason = 14;
    {
      <span class="comment">/**
        * The node was included because we explicitly traversed the DOM
        * (sub-)tree.
        */</span>
      <span class="enum">TRAVERSAL</span> = 1;
      <span class="comment">/**
        * The node was included because it is an ancestor of a node hit by a
        * search.
        */</span>
      <span class="enum">SEARCH_ANCESTOR</span> = 2;
      <span class="comment">/**
        * The node was included because it was directly hit by a search.
        */</span>
      <span class="enum">SEARCH_HIT</span> = 3;
    }
    <span class="comment">/**
      * If the node has pseudo elements applied, this list will contain those
      * elements.
      * 
      * @since 6.5
      */</span>
    repeated PseudoElement pseudoElementList = 15;
    {
      required Type type = 1;
      {
        <span class="enum">BEFORE</span> = 1;
        <span class="enum">AFTER</span> = 2;
        <span class="enum">FIRST_LETTER</span> = 3;
        <span class="enum">FIRST_LINE</span> = 4;
      }
      <span class="comment">/**
        * If a ::before or ::after rule uses the 'content' property to insert
        * text content, this field will contain that content.
        */</span>
      optional <span class="string">string</span> content = 2;
    }
  }
}
