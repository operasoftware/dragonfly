message <span class="message">ObjectList</span>
{
  repeated PrototypeChain prototypeList = 1;
  {
    repeated Object objectList = 1;
    {
      <span class="comment">/**
        * The unique ID of the object, valid until the object is garbage collected
        * or the service is disabled.
        * 
        * Is an integer from 1 and up.
        */</span>
      required <span class="number">uint32</span> objectID = 1;
      <span class="comment">/**
        * true if the object can be called, this is typically functions but
        * other objects are also possible.
        */</span>
      required <span class="boolean">bool</span> isCallable = 2;
      <span class="comment">/**
        * The type of object, either a plain object or a function.
        */</span>
      required ObjectType type = 3;
      {
        <span class="enum">OBJECT</span> = 1;
        <span class="enum">FUNCTION</span> = 2;
      }
      <span class="comment">/**
        * The ID of the prototype for this object if it has a prototype.
        * A prototype is just another object and can be examined with
        * ExamineObjects().
        */</span>
      optional <span class="number">uint32</span> prototypeID = 4;
      <span class="comment">/**
        * The name of the class used to create this object. Examples::
        * 
        *   "Object"
        *   "Array"
        *   "Function"
        *   "HTMLHtmlElement"
        */</span>
      optional <span class="string">string</span> className = 5;
      <span class="comment">/**
        * The name of the function, only set if type = FUNCTION. If the function
        * is anonymous, then a suitable alias *may* be assigned based on context,
        * if possible. For instance::
        * 
        *   foo.bar = function(){}
        * 
        * Would get the functionName 'bar'.
        */</span>
      optional <span class="string">string</span> functionName = 6;
      <span class="comment">/**
        * A list of properties available on the object.
        * 
        * Is omitted in some cases when a full property list (can be huge) is not
        * desirable.
        */</span>
      repeated Property propertyList = 7;
      {
        required <span class="string">string</span> name = 1;
        required Value value = 2;
        {
          <span class="comment">/**
            * The type of value.
            * 
            * @note Booleans are encoded as either TRUE or FALSE to shorten the number
            * fields in use.
            */</span>
          optional Type type = 1;
          {
            <span class="comment">/**
              * The undefined type, returned when no value was found or "undefined"
              * was referenced.
              */</span>
            <span class="enum">UNDEFINED</span> = 0;
            <span class="comment">/**
              * A null value.
              */</span>
            <span class="enum">NULL</span> = 1;
            <span class="comment">/**
              * Boolean value true.
              */</span>
            <span class="enum">TRUE</span> = 2;
            <span class="comment">/**
              * Boolean value false.
              */</span>
            <span class="enum">FALSE</span> = 3;
            <span class="comment">/**
              * NaN value which cannot be exported to JSON directly.
              * Should be treated like a number.
              * 
              * ECMAScript users should use this code to get the value natively::
              * 
              *   parseFloat("NaN")
              */</span>
            <span class="enum">NAN</span> = 4;
            <span class="comment">/**
              * Plus infinity value which cannot be export to JSON directly.
              * Should be treated like a number.
              * 
              * ECMAScript users should use this code to get the value natively::
              * 
              *   parseFloat("Infinity")
              */</span>
            <span class="enum">PLUS_INFINITY</span> = 5;
            <span class="comment">/**
              * Minus infinity value which cannot be export to JSON directly.
              * Should be treated like a number.
              * 
              * ECMAScript users should use this code to get the value natively::
              * 
              *   parseFloat("-Infinity")
              */</span>
            <span class="enum">MINUS_INFINITY</span> = 6;
            <span class="comment">/**
              * A number, use the field 'number' for the actual value.
              */</span>
            <span class="enum">NUMBER</span> = 7;
            <span class="comment">/**
              * A string, use the field 'str' for the actual string data.
              */</span>
            <span class="enum">STRING</span> = 8;
            <span class="comment">/**
              * An object, the field 'object' contains object details.
              */</span>
            <span class="enum">OBJECT</span> = 9;
          }
          <span class="comment">/**
            * The numeric value, set if type = NUMBER.
            */</span>
          optional <span class="number">double</span> number = 2;
          <span class="comment">/**
            * The string, set if type = STRING.
            */</span>
          optional <span class="string">string</span> str = 3;
          <span class="comment">/**
            * Object information, set if type = OBJECT.
            */</span>
          optional Object object = 4;
        }
      }
    }
  }
}
