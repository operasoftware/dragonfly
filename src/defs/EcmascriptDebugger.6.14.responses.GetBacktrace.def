<span class="comment">/** 
 * Frames are in innermost-first order.
 */</span>
message <span class="message">BacktraceFrameList</span>
{
  message <span class="message">BacktraceFrame</span>
  {
    required <span class="number">uint32     </span> functionID     =  1; 
    required <span class="number">uint32     </span> argumentObject =  2; 
    required <span class="number">uint32     </span> variableObject =  3; 
    required <span class="number">uint32     </span> thisObject     =  4; 
    <span class="comment">/** 
     * TODO: Spec says repeated, while the code only assumes one (required)
     */</span>
    optional <span class="message">ObjectValue</span> objectValue    =  5; 
    optional <span class="number">uint32     </span> scriptID       =  6; 
    optional <span class="number">uint32     </span> lineNumber     =  7; 
    <span class="comment">/** 
     * The variable objects in the scope chain of the function. The first
     * element in the list is the innermost scope (the scope of the function
     * itself). The list includes the global scope.
     * 
     * @since 6.1
     */</span>
    repeated <span class="number">uint32     </span> scopeList      =  8; 
    <span class="comment">/** 
     * The full value of the 'arguments' object.
     * 
     * @since 6.2
     */</span>
    optional <span class="message">ObjectValue</span> argumentValue  =  9; 
    <span class="comment">/** 
     * The full value of the 'this' object.
     * 
     * @since 6.2
     */</span>
    optional <span class="message">ObjectValue</span> thisValue      = 10; 
  }
  message <span class="message">ObjectValue</span>
  {
    required <span class="number">uint32</span> objectID     = 1; 
    required <span class="bool">bool  </span> isCallable   = 2; 
    <span class="comment">/** 
     * type, function or object
     */</span>
    required <span class="string">string</span> type         = 3; 
    optional <span class="number">uint32</span> prototypeID  = 4; 
    <span class="comment">/** 
     * The class of the object.
     */</span>
    optional <span class="string">string</span> className    = 5; 
    <span class="comment">/** 
     * If the object is a function, this is the name of
     * the variable associated with that function (if any).
     */</span>
    optional <span class="string">string</span> functionName = 6; 
  }
  <span class="comment">/** 
   * The object representing return value of a function. Includes context
   * information indicating where from and where to the value was returned (script
   * id, line number), returned value and function object itself that returned
   * the value.
   * 
   * @since 6.10
   */</span>
  message <span class="message">ReturnValue</span>
  {
    <span class="comment">/** 
     * The value that was returned.
     */</span>
    required <span class="message">Value      </span> value        = 1; 
    <span class="comment">/** 
     * The function object from which the value was returned.
     */</span>
    required <span class="message">ObjectValue</span> functionFrom = 4; 
    <span class="comment">/** 
     * The position where the value was returned from.
     */</span>
    required <span class="message">Position   </span> positionFrom = 2; 
    <span class="comment">/** 
     * The position where the value was returned to.
     */</span>
    required <span class="message">Position   </span> positionTo   = 3; 
  }
  <span class="comment">/** 
   * Represents an ECMAScript value, a value is either one of the primitives
   * like string or boolean or an object.
   */</span>
  message <span class="message">Value</span>
  {
    enum Type
    {
      <span class="comment">/** 
       * The undefined type, returned when no value was found or "undefined"
       * was referenced.
       */</span>
      UNDEFINED = 0;
      <span class="comment">/** 
       * A null value.
       */</span>
      NULL = 1;
      <span class="comment">/** 
       * Boolean value true.
       */</span>
      TRUE = 2;
      <span class="comment">/** 
       * Boolean value false.
       */</span>
      FALSE = 3;
      <span class="comment">/** 
       * NaN value which cannot be exported to JSON directly.
       * Should be treated like a number.
       * 
       * ECMAScript users should use this code to get the value natively::
       * 
       *   parseFloat("NaN")
       */</span>
      NAN = 4;
      <span class="comment">/** 
       * Plus infinity value which cannot be export to JSON directly.
       * Should be treated like a number.
       * 
       * ECMAScript users should use this code to get the value natively::
       * 
       *   parseFloat("Infinity")
       */</span>
      PLUS_INFINITY = 5;
      <span class="comment">/** 
       * Minus infinity value which cannot be export to JSON directly.
       * Should be treated like a number.
       * 
       * ECMAScript users should use this code to get the value natively::
       * 
       *   parseFloat("-Infinity")
       */</span>
      MINUS_INFINITY = 6;
      <span class="comment">/** 
       * A number, use the field 'number' for the actual value.
       */</span>
      NUMBER = 7;
      <span class="comment">/** 
       * A string, use the field 'str' for the actual string data.
       */</span>
      STRING = 8;
      <span class="comment">/** 
       * An object, the field 'object' contains object details.
       */</span>
      OBJECT = 9;
    }

    <span class="comment">/** 
     * The type of value.
     * 
     * @note Booleans are encoded as either TRUE or FALSE to shorten the number
     * fields in use.
     */</span>
    optional <span class="number">Type       </span> type   = 1; 
    <span class="comment">/** 
     * The numeric value, set if type = NUMBER.
     */</span>
    optional <span class="number">double     </span> number = 2; 
    <span class="comment">/** 
     * The string, set if type = STRING.
     */</span>
    optional <span class="string">string     </span> str    = 3; 
    <span class="comment">/** 
     * Object information, set if type = OBJECT.
     */</span>
    optional <span class="message">ObjectValue</span> object = 4; 
  }
  <span class="comment">/** 
   * Defines the position in a script. The position is identified by the ID of
   * the script and the line number in the script.
   */</span>
  message <span class="message">Position</span>
  {
    <span class="comment">/** 
     * ID of the script which contains the position.
     * The ID will be set in the ScriptInfo message when a new script appears.
     */</span>
    required <span class="number">uint32</span> scriptID   = 1; 
    <span class="comment">/** 
     * The line number in the script.
     */</span>
    required <span class="number">uint32</span> lineNumber = 2; 
  }
  repeated <span class="message">BacktraceFrame</span> frameList       = 1; 
  <span class="comment">/** 
   * The list of return values that were returned from the most recent
   * function calls. List is cleared upon calling a function.
   * Most recently returned value is first in the list.
   * 
   * @since 6.10
   */</span>
  repeated <span class="message">ReturnValue   </span> returnValueList = 2; 
}
