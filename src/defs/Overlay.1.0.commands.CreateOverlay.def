message <span class="message">CreateOverlayArg</span>
{
  required <span class="number">uint32</span> windowID = 1;
  <span class="comment">/**
    * The type of overlay we want to create.
    */</span>
  required OverlayType overlayType = 2;
  {
    <span class="comment">/**
      * The overlay will be an `AreaOverlay`.
      */</span>
    <span class="enum">AREA</span> = 1;
  }
  <span class="comment">/**
    * Where to insert this overlay in the list of overlays.
    */</span>
  required Insertion insertion = 3;
  {
    <span class="comment">/**
      * Specifies how an overlay should be inserted.
      */</span>
    required InsertionMethod method = 1;
    {
      <span class="comment">/**
        * Insert the overlay at the front. This means this overlay will be
        * rendered over all other overlays.
        */</span>
      <span class="enum">FRONT</span> = 1;
      <span class="comment">/**
        * Insert the overlay at the back. This means all other overlays will
        * be rendered over this overlay.
        */</span>
      <span class="enum">BACK</span> = 2;
      <span class="comment">/**
        * Insert an overlay in front of another overlay. This means this
        * overlay will be rendered over the other overlay.
        */</span>
      <span class="enum">ABOVE_TARGET</span> = 3;
      <span class="comment">/**
        * Insert an overlay behind another overlay. This means this overlay
        * will be rendered below the other overlay.
        */</span>
      <span class="enum">BELOW_TARGET</span> = 4;
    }
    <span class="comment">/**
      * If `method` is `ABOVE_TARGET` or `BELOW_TARGET`, then this field must
      * be set, and refer to a valid overlay.
      */</span>
    optional <span class="number">uint32</span> overlayID = 2;
  }
  <span class="comment">/**
    * Must be provided if `overlayType` is `AREA`.
    */</span>
  optional AreaOverlay areaOverlay = 4;
  {
    <span class="comment">/**
      * The area that should be painted.
      */</span>
    required Area area = 1;
    {
      <span class="comment">/**
        * The x-coordinate of the upper-left corner of the area, in document
        * coordinates.
        */</span>
      required <span class="number">uint32</span> x = 1;
      <span class="comment">/**
        * The y-coordinate of the upper-left corner of the area, in document
        * coordinates.
        */</span>
      required <span class="number">uint32</span> y = 2;
      <span class="comment">/**
        * The width of the area.
        */</span>
      required <span class="number">uint32</span> w = 3;
      <span class="comment">/**
        * The height of the area.
        */</span>
      required <span class="number">uint32</span> h = 4;
    }
    <span class="comment">/**
      * The background color of the area.
      */</span>
    required Color backgroundColor = 2;
    {
      <span class="comment">/**
        * The red component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> r = 1;
      <span class="comment">/**
        * The green component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> g = 2;
      <span class="comment">/**
        * The blue component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> b = 3;
      <span class="comment">/**
        * The alpha component of the `Color`. (0 - 255).
        */</span>
      optional <span class="number">uint32</span> a = 4 [default = 255];
    }
    <span class="comment">/**
      * If set, draw a 1px border on the inside of the area.
      */</span>
    optional Color borderColor = 3;
    {
      <span class="comment">/**
        * The red component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> r = 1;
      <span class="comment">/**
        * The green component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> g = 2;
      <span class="comment">/**
        * The blue component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> b = 3;
      <span class="comment">/**
        * The alpha component of the `Color`. (0 - 255).
        */</span>
      optional <span class="number">uint32</span> a = 4 [default = 255];
    }
    <span class="comment">/**
      * If set, draw a 1px wide lines intersecting the area edges
      * and extending over whole window.
      */</span>
    optional Color gridColor = 4;
    {
      <span class="comment">/**
        * The red component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> r = 1;
      <span class="comment">/**
        * The green component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> g = 2;
      <span class="comment">/**
        * The blue component of the `Color`. (0 - 255).
        */</span>
      required <span class="number">uint32</span> b = 3;
      <span class="comment">/**
        * The alpha component of the `Color`. (0 - 255).
        */</span>
      optional <span class="number">uint32</span> a = 4 [default = 255];
    }
  }
}
